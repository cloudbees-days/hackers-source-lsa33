apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: psgenius-n8n-ai-agent-nodejs
on:
  workflow_dispatch:
permissions:
  scm-token-own: read
  scm-token-org: read
  id-token: write
env:
  APP_NAME: hackers-organized
  NAMESPACE: lsa33

jobs:
  build-app:
    steps:
      - name: Initialize log file
        uses: docker://alpine:latest
        run: |
          # Initialiser le fichier de log
          LOG_FILE="/cloudbees/workspace/full_build.log"
          touch "$LOG_FILE"
          echo "=== WORKFLOW STARTED AT $(date) ===" > "$LOG_FILE"
          echo "Workflow ID: ${{ cloudbees.run_id }}" >> "$LOG_FILE"
          echo "Workflow Name: psgenius-n8n-ai-agent-nodejs" >> "$LOG_FILE"
          
      - name: Checkout code
        uses: cloudbees-io/checkout@v1
        with:
          fetch-depth: 1
        id: checkout
        continue-on-error: true
      - name: Log Checkout Details
        uses: docker://alpine:latest
        run: |
          LOG_FILE="/cloudbees/workspace/full_build.log"
          echo "=== CHECKOUT DETAILS ===" >> "$LOG_FILE"
          if [ -d "/cloudbees/workspace/.git" ]; then
            echo "Git repository successfully checked out." >> "$LOG_FILE"
            apk add --no-cache git
            git remote -v >> "$LOG_FILE" 2>&1
            git log -1 >> "$LOG_FILE" 2>&1
          else
            echo "Checkout may have failed - .git directory not found." >> "$LOG_FILE"
          fi

      - name: Install and build with full log capture
        id: build
        uses: docker://node:lts
        run: |
          LOG_FILE="/cloudbees/workspace/full_build.log"
          # Capturer tous les logs (stdout et stderr) dans le fichier log
          {
            echo "=== NODE VERSION ==="
            node -v
            npm -v
            
            echo "=== NPM INSTALL ==="
            npm ci
            
            echo "=== BUILD STARTED ==="
            npm run build
            
            echo "=== BUILD COMPLETE ==="
          } >> "$LOG_FILE" 2>&1
          
          # Conserver le code d'erreur pour la fin
          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          exit $BUILD_EXIT_CODE

      - name: Send raw logs to n8n
        if: always()
        uses: docker://curlimages/curl:latest
        run: |
          # Vérifier si le fichier de log existe
          LOG_FILE="/cloudbees/workspace/full_build.log"
          if [ -f "$LOG_FILE" ]; then
            # Créer le payload
            LOG_CONTENT=$(cat "$LOG_FILE" | sed 's/"/\\"/g' | tr '\n' '\\n')
            PAYLOAD="{\"run_id\":\"${{ cloudbees.run_id }}\",\"status\":\"failure\",\"logs\":\"$LOG_CONTENT\"}"
            
            # Afficher la taille du payload
            echo "Payload size: ${#PAYLOAD} bytes"
            
            # Envoyer au webhook
            curl -X POST \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "https://still-elegant-asp.ngrok-free.app/webhook/ci-failure"
          else
            echo "Log file not found at $LOG_FILE"
            PAYLOAD="{\"run_id\":\"${{ cloudbees.run_id }}\",\"status\":\"failure\",\"logs\":\"Log file not found\"}"
            curl -X POST \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "https://still-elegant-asp.ngrok-free.app/webhook/ci-failure"
          fi