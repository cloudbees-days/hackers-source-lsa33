apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: psgenius-n8n-ai-agent-nodejs
on:
  workflow_dispatch:
permissions:
  scm-token-own: read
  scm-token-org: read
  id-token: write
env:
  APP_NAME: hackers-organized
  NAMESPACE: lsa33
jobs:
  build-app:
    steps:
      - uses: cloudbees-io/checkout@v1
        name: Get source code
      
      - name: Build Node.js application and capture logs
        id: BuildNodeApp
        uses: docker://node:lts
        run: |
          # Exécuter les commandes et capturer tous les logs dans un fichier
          {
            echo "=== BUILD STARTED AT $(date) ==="
            echo "Node version: $(node -v)"
            echo "NPM version: $(npm -v)"
            echo "=== NPM INSTALL ==="
            npm ci
            echo "=== NPM BUILD ==="
            npm run build
          } 2>&1 | tee /cloudbees/workspace/build_logs.txt
          
          # Conserver le code de sortie pour déterminer si le build a réussi
          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          exit $BUILD_EXIT_CODE
      
      - name: Send failure notification with logs
        if: ${{ failure() }}
        uses: docker://alpine:latest
        run: |
          # Installer curl et jq
          apk add --no-cache curl jq
          
          # Récupérer les logs capturés à l'étape précédente
          if [ -f "/cloudbees/workspace/build_logs.txt" ]; then
            LOGS=$(cat /cloudbees/workspace/build_logs.txt)
          else
            LOGS="Logs non disponibles"
          fi
          
          # Afficher les informations du fichier problématique
          if [ -f "/cloudbees/workspace/src/main.js" ]; then
            echo "Contenu du fichier source problématique:"
            cat /cloudbees/workspace/src/main.js
            LOGS="${LOGS}\n\n=== PROBLEMATIC FILE CONTENT ===\n$(cat /cloudbees/workspace/src/main.js)"
          fi
          
          # Créer le payload avec les logs
          jq -n \
            --arg job "psgenius-n8n-ai-agent-nodejs" \
            --arg build "${{ cloudbees.run_id }}" \
            --arg result "FAILURE" \
            --arg timestamp "$(date +%s)" \
            --arg step "Node.js Build" \
            --arg logs "$LOGS" \
            '{job: $job, build: $build, result: $result, timestamp: $timestamp, failedStep: $step, buildLogs: $logs}' > /tmp/payload.json
          
          echo "Envoi du payload webhook avec logs..."
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -d @/tmp/payload.json \
            --connect-timeout 60 \
            https://still-elegant-asp.ngrok-free.app/webhook/ci-failure